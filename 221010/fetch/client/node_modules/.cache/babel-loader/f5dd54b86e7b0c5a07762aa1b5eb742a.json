{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/TIL/221010/fetch/client/src/App.js\",\n    _s = $RefreshSig$();\n\n// fetch 기본제공\n// axios 라이브러리 필요.\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [todoList, setTodoList] = useState(null); // 데이터를 띄우는 방법에 여러가지가 있겠지만 useState를 사용해서 띄워보자\n  // 처음에 이렇게 null 값 넣어서 해도 되는건가?\n  // 처음 컴포넌트 렌더링 될 때만 실행될 수 있게 useEffect사용. \n  // useState쓰면 계속 돌면서 update시켜서 console에 에러 많음\n\n  useEffect(() => {\n    fetch('http://localhost:4000/api/todo') // fetch가 리렌더링 될때마다 실행되도록 코드를 짰기 때문에 계속 렌더링 됐었음.\n    .then(response => response.json()).then(data => setTodoList(data));\n  }, []); // 디텐던시 [] 넣으면 처음에만 실행됨.\n\n  const onSubmitHandler = e => {\n    e.preventDefault(); // submit이 실행하는 기본 동작 막기.\n\n    const text = e.target.text.value;\n    const done = e.target.done.value;\n    fetch('http://localhost:4000/api/todo', {\n      method: 'POST',\n      // 아무것도 안적으면 get요청이 됨.\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        done\n      }) // 데이터를 보내줄 때는 body에 문자열로 직렬화를 해서 보내줌.\n\n    });\n  }; // 딱히 응답을 받아서 뭘 할건 아니기 때문에 요청만 보내고 끝내기.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"done\",\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"\\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), todoList === null || todoList === void 0 ? void 0 : todoList.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: todo.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: todo.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: todo.done ? 'Y' : 'N'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7ZUpC1+D6Ysi8SP5DYMHHJgkam0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","App","todoList","setTodoList","fetch","then","response","json","data","onSubmitHandler","e","preventDefault","text","target","value","done","method","headers","body","JSON","stringify","map","todo","id"],"sources":["/Users/user/Desktop/TIL/221010/fetch/client/src/App.js"],"sourcesContent":["// fetch 기본제공\n// axios 라이브러리 필요.\n\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [todoList, setTodoList] = useState(null); \n  // 데이터를 띄우는 방법에 여러가지가 있겠지만 useState를 사용해서 띄워보자\n  // 처음에 이렇게 null 값 넣어서 해도 되는건가?\n\n  // 처음 컴포넌트 렌더링 될 때만 실행될 수 있게 useEffect사용. \n  // useState쓰면 계속 돌면서 update시켜서 console에 에러 많음\n  useEffect(() => {\n    fetch('http://localhost:4000/api/todo')\n    // fetch가 리렌더링 될때마다 실행되도록 코드를 짰기 때문에 계속 렌더링 됐었음.\n    .then((response) => response.json())\n    .then((data) => setTodoList(data)); \n  }, []); // 디텐던시 [] 넣으면 처음에만 실행됨.\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault(); // submit이 실행하는 기본 동작 막기.\n    const text = e.target.text.value;\n    const done = e.target.done.value;\n    fetch('http://localhost:4000/api/todo', {\n      method: 'POST', // 아무것도 안적으면 get요청이 됨.\n      headers: {\n        'Content-Type' : 'application/json',\n      },\n      body: JSON.stringify({\n        text,\n        done,\n      }), // 데이터를 보내줄 때는 body에 문자열로 직렬화를 해서 보내줌.\n    }); \n  }; // 딱히 응답을 받아서 뭘 할건 아니기 때문에 요청만 보내고 끝내기.\n\n  return (\n    <div className=\"App\">\n      <h1>todo List</h1>\n      <form onSubmit={onSubmitHandler}>\n        <input name=\"text\" />\n        <input name=\"done\" type=\"checkbox\" />\n        <input type=\"submit\" value=\"추가\" />\n      </form>\n        {/* 옵셔널체이닝으로 투두가 없을 때는 undefined를 만들어서 렌더링이 되지 않도록 하기 */}\n        {todoList?.map((todo) => (\n          <div key={todo.id}>\n            <div>{todo.id}</div>\n            <div>{todo.text}</div>\n            <div>{todo.done ? 'Y':'N'}</div>\n            {/* todo.done은 true,false 값이라 나오지 않으니 삼항 연산자로 표기해주자. */}\n          </div>\n        ))} \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA;AACA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,IAAD,CAAxC,CADa,CAEb;EACA;EAEA;EACA;;EACAD,SAAS,CAAC,MAAM;IACdK,KAAK,CAAC,gCAAD,CAAL,CACA;IADA,CAECC,IAFD,CAEOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAFpB,EAGCF,IAHD,CAGOG,IAAD,IAAUL,WAAW,CAACK,IAAD,CAH3B;EAID,CALQ,EAKN,EALM,CAAT,CAPa,CAYL;;EAER,MAAMC,eAAe,GAAIC,CAAD,IAAO;IAC7BA,CAAC,CAACC,cAAF,GAD6B,CACT;;IACpB,MAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASD,IAAT,CAAcE,KAA3B;IACA,MAAMC,IAAI,GAAGL,CAAC,CAACG,MAAF,CAASE,IAAT,CAAcD,KAA3B;IACAV,KAAK,CAAC,gCAAD,EAAmC;MACtCY,MAAM,EAAE,MAD8B;MACtB;MAChBC,OAAO,EAAE;QACP,gBAAiB;MADV,CAF6B;MAKtCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACnBR,IADmB;QAEnBG;MAFmB,CAAf,CALgC,CAQlC;;IARkC,CAAnC,CAAL;EAUD,CAdD,CAda,CA4BV;;;EAEH,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAM,QAAQ,EAAEN,eAAhB;MAAA,wBACE;QAAO,IAAI,EAAC;MAAZ;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,IAAI,EAAC;MAAxB;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAO,IAAI,EAAC,QAAZ;QAAqB,KAAK,EAAC;MAA3B;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,EAQKP,QARL,aAQKA,QARL,uBAQKA,QAAQ,CAAEmB,GAAV,CAAeC,IAAD,iBACb;MAAA,wBACE;QAAA,UAAMA,IAAI,CAACC;MAAX;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAMD,IAAI,CAACV;MAAX;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA,UAAMU,IAAI,CAACP,IAAL,GAAY,GAAZ,GAAgB;MAAtB;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA,GAAUO,IAAI,CAACC,EAAf;MAAA;MAAA;MAAA;IAAA,QADD,CARL;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD;;GAjDQtB,G;;KAAAA,G;AAmDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}