{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/TIL/221010/fetch/client/src/App.js\",\n    _s = $RefreshSig$();\n\n// fetch 기본제공\n// axios 라이브러리 필요.\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = 'http://localhost:4000/api/todo';\n\nfunction App() {\n  _s();\n\n  const [todoList, setTodoList] = useState(null); // async로 보내는 법\n\n  const fetchData = async () => {\n    const response = await axios.get(SERVER_URL);\n    setTodoList(response.data);\n  }; // axios로 보내는 법. / 이전 코드가 fetch를 변수화 시킨 것으로 변수명만 바꾸면 됨.\n  // const fetchData = () => {\n  //   axios.get('http://localhost:4000/api/todo').then((response) => {\n  //     setTodoList(response.data);\n  //   });\n  // fetch로 보내는 법\n  // const fetchData = () => {\n  // fetch('http://localhost:4000/api/todo') \n  //   .then((response) => response.json())\n  //   .then((data) => setTodoList(data)); }\n  // 중복되는 부분을 함수로 따로 빼줬음.\n  // 데이터를 띄우는 방법에 여러가지가 있겠지만 useState를 사용해서 띄워보자\n  // 처음에 이렇게 null 값 넣어서 해도 되는건가?\n  // 처음 컴포넌트 렌더링 될 때만 실행될 수 있게 useEffect사용. \n  // useState쓰면 계속 돌면서 update시켜서 console에 에러 많음\n  // fetch가 리렌더링 될때마다 실행되도록 코드를 짰기 때문에 계속 렌더링 됐었음.\n\n\n  useEffect(() => {\n    fetchData();\n  }, []); // 디텐던시 [] 넣으면 처음에만 실행됨.\n\n  const onSubmitHandler = async e => {\n    e.preventDefault(); // submit이 실행하는 기본 동작 막기.\n\n    const text = e.target.text.value;\n    const done = e.target.done.checked; // value로 넣으면 체크된 값 알 수 없음. check박스니까  checked로 표시해주자.\n\n    await axios.post(SERVER_URL, {\n      text,\n      done\n    });\n    fetchData(); // 데이터를 넣는 것은 두 번째 인자로.\n    // axios는 fetch에서 직렬화해줬던 부분, header에 콘텐트타입 넣던 것들을 생략 가능함.\n    // fetch('http://localhost:4000/api/todo', {\n    //   method: 'POST', // 아무것도 안적으면 get요청이 됨.\n    //   headers: {\n    //     'Content-Type' : 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     text,\n    //     done,\n    //   }), // 데이터를 보내줄 때는 body에 문자열로 직렬화를 해서 보내줌.\n    // }).then(() => fetchData()); \n    // useEffect로 첫 렌더링 될때만 화면 불러와지게 했으므로 바로바로 업데이트하기 위한 처리 과정 추가.\n    // 근데 코드가 중복됐기 때문에 나쁜 코드. \n    // 코드 따로 빼줬다..\n  }; // 딱히 응답을 받아서 뭘 할건 아니기 때문에 요청만 보내고 끝내기.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"done\",\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"\\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), todoList === null || todoList === void 0 ? void 0 : todoList.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: todo.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: todo.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: todo.done ? 'Y' : 'N'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7ZUpC1+D6Ysi8SP5DYMHHJgkam0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","useEffect","useState","SERVER_URL","App","todoList","setTodoList","fetchData","response","get","data","onSubmitHandler","e","preventDefault","text","target","value","done","checked","post","map","todo","display","id"],"sources":["/Users/user/Desktop/TIL/221010/fetch/client/src/App.js"],"sourcesContent":["// fetch 기본제공\n// axios 라이브러리 필요.\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nconst SERVER_URL = 'http://localhost:4000/api/todo';\n\nfunction App() {\n  const [todoList, setTodoList] = useState(null); \n\n\n  // async로 보내는 법\n  const fetchData = async () => {\n    const response = await axios.get(SERVER_URL);\n    setTodoList(response.data);\n    };\n\n  // axios로 보내는 법. / 이전 코드가 fetch를 변수화 시킨 것으로 변수명만 바꾸면 됨.\n  // const fetchData = () => {\n  //   axios.get('http://localhost:4000/api/todo').then((response) => {\n  //     setTodoList(response.data);\n  //   });\n\n    // fetch로 보내는 법\n    // const fetchData = () => {\n    // fetch('http://localhost:4000/api/todo') \n    //   .then((response) => response.json())\n    //   .then((data) => setTodoList(data)); }\n   // 중복되는 부분을 함수로 따로 빼줬음.\n\n  // 데이터를 띄우는 방법에 여러가지가 있겠지만 useState를 사용해서 띄워보자\n  // 처음에 이렇게 null 값 넣어서 해도 되는건가?\n\n  // 처음 컴포넌트 렌더링 될 때만 실행될 수 있게 useEffect사용. \n  // useState쓰면 계속 돌면서 update시켜서 console에 에러 많음\n  // fetch가 리렌더링 될때마다 실행되도록 코드를 짰기 때문에 계속 렌더링 됐었음.\n  useEffect(() => {\n    fetchData()}, []); // 디텐던시 [] 넣으면 처음에만 실행됨.\n\n  const onSubmitHandler = async (e) => {\n    e.preventDefault(); // submit이 실행하는 기본 동작 막기.\n    const text = e.target.text.value;\n    const done = e.target.done.checked; // value로 넣으면 체크된 값 알 수 없음. check박스니까  checked로 표시해주자.\n    await axios.post(SERVER_URL, {text,done});\n    fetchData();\n    // 데이터를 넣는 것은 두 번째 인자로.\n    // axios는 fetch에서 직렬화해줬던 부분, header에 콘텐트타입 넣던 것들을 생략 가능함.\n    // fetch('http://localhost:4000/api/todo', {\n    //   method: 'POST', // 아무것도 안적으면 get요청이 됨.\n    //   headers: {\n    //     'Content-Type' : 'application/json',\n    //   },\n    //   body: JSON.stringify({\n    //     text,\n    //     done,\n    //   }), // 데이터를 보내줄 때는 body에 문자열로 직렬화를 해서 보내줌.\n    // }).then(() => fetchData()); \n      // useEffect로 첫 렌더링 될때만 화면 불러와지게 했으므로 바로바로 업데이트하기 위한 처리 과정 추가.\n      // 근데 코드가 중복됐기 때문에 나쁜 코드. \n      // 코드 따로 빼줬다..\n  }; // 딱히 응답을 받아서 뭘 할건 아니기 때문에 요청만 보내고 끝내기.\n\n  return (\n    <div className=\"App\">\n      <h1>todo List</h1>\n      <form onSubmit={onSubmitHandler}>\n        <input name=\"text\" />\n        <input name=\"done\" type=\"checkbox\" />\n        <input type=\"submit\" value=\"추가\" />\n      </form>\n        {/* 옵셔널체이닝으로 투두가 없을 때는 undefined를 만들어서 렌더링이 되지 않도록 하기 */}\n        {todoList?.map((todo) => (\n          <div key={todo.id} style={{ display : 'flex' }}> \n          {/* 보기가 안좋으니 display에 flex를 추가했음. */}\n            <div>{todo.id}</div>\n            <div>{todo.text}</div>\n            <div>{todo.done ? 'Y':'N'}</div>\n            {/* todo.done은 true,false 값이라 나오지 않으니 삼항 연산자로 표기해주자. */}\n          </div>\n        ))} \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,UAAU,GAAG,gCAAnB;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,IAAD,CAAxC,CADa,CAIb;;EACA,MAAMK,SAAS,GAAG,YAAY;IAC5B,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAUN,UAAV,CAAvB;IACAG,WAAW,CAACE,QAAQ,CAACE,IAAV,CAAX;EACC,CAHH,CALa,CAUb;EACA;EACA;EACA;EACA;EAEE;EACA;EACA;EACA;EACA;EACD;EAED;EACA;EAEA;EACA;EACA;;;EACAT,SAAS,CAAC,MAAM;IACdM,SAAS;EAAG,CADL,EACO,EADP,CAAT,CA7Ba,CA8BQ;;EAErB,MAAMI,eAAe,GAAG,MAAOC,CAAP,IAAa;IACnCA,CAAC,CAACC,cAAF,GADmC,CACf;;IACpB,MAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASD,IAAT,CAAcE,KAA3B;IACA,MAAMC,IAAI,GAAGL,CAAC,CAACG,MAAF,CAASE,IAAT,CAAcC,OAA3B,CAHmC,CAGC;;IACpC,MAAMlB,KAAK,CAACmB,IAAN,CAAWhB,UAAX,EAAuB;MAACW,IAAD;MAAMG;IAAN,CAAvB,CAAN;IACAV,SAAS,GAL0B,CAMnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACE;IACA;IACA;EACH,CArBD,CAhCa,CAqDV;;;EAEH,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAM,QAAQ,EAAEI,eAAhB;MAAA,wBACE;QAAO,IAAI,EAAC;MAAZ;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,IAAI,EAAC,MAAZ;QAAmB,IAAI,EAAC;MAAxB;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAO,IAAI,EAAC,QAAZ;QAAqB,KAAK,EAAC;MAA3B;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,EAQKN,QARL,aAQKA,QARL,uBAQKA,QAAQ,CAAEe,GAAV,CAAeC,IAAD,iBACb;MAAmB,KAAK,EAAE;QAAEC,OAAO,EAAG;MAAZ,CAA1B;MAAA,wBAEE;QAAA,UAAMD,IAAI,CAACE;MAAX;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAA,UAAMF,IAAI,CAACP;MAAX;QAAA;QAAA;QAAA;MAAA,QAHF,eAIE;QAAA,UAAMO,IAAI,CAACJ,IAAL,GAAY,GAAZ,GAAgB;MAAtB;QAAA;QAAA;QAAA;MAAA,QAJF;IAAA,GAAUI,IAAI,CAACE,EAAf;MAAA;MAAA;MAAA;IAAA,QADD,CARL;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD;;GA3EQnB,G;;KAAAA,G;AA6ET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}